#!/usr/bin/env python

"""
Pylint for emacs
"""
import os
import re
import sys

from subprocess import Popen, PIPE

ignore = ",".join ( [
    # "C0103",  # Naming convention
    # "I0011",  # Warning locally suppressed using disable-msg
    # "I0012",  # Warning locally suppressed using disable-msg
    # "W0511",  # FIXME/TODO
    "W0142",  # *args or **kwargs magic.
    # "R0904",  # Too many public methods
    # "R0201",  # Method could be a function
    # "E1101",  # No instance member
    "W0201", # defined outside __init__
    "W0141",
] )

cmd = "%s --output-format parseable --include-ids y --reports n --disable=%s %s  --generated-members=objects,DoesNotExist,id,pk,_default_manager,_meta,add_closedcaption,add_inheritance,add_rendition,add_sequence,add_sibling,add_thumbnail,add_transcript,change_password,connect,create_asset,create_closedcaption,create_file,create_folder,create_rendition,create_thumbnail,create_transcript,delete_asset,delete_closedcaption,delete_file,delete_folder,delete_rendition,delete_thumbnail,delete_transcript,forgot_password,get_asset,get_assets,get_closedcaption,get_file,get_files,get_folder,get_folders,get_profile,get_rendition,get_thumbnail,get_transcript,get_users,login,move_file,move_folder,register,remove_closedcaption,remove_rendition,remove_thumbnail,remove_transcript,reset_password,search,submit_asset,submit_folder,unregister,update_asset,update_closedcaption,update_file,update_folder,update_profile,update_rendition,update_thumbnail,update_transcript,_service_list,_signals,base_fields,context" % \
    (os.path.join(os.path.dirname(__file__), '../emacs_python/bin/pylint'),  ignore, sys.argv[1], )


p = Popen ( cmd, shell = True, bufsize = -1,
            stdin = PIPE, stdout = PIPE, stderr = PIPE, close_fds = True )

pylint_re = re.compile ('^([^:]+):(\d+):\s*\[([WECR])([^,]+),{0,1}\s*([^\]]+)\]\s*(.*)$')

for line in p.stdout:
    line = line.strip()
    m = pylint_re.match ( line )
    if m:
        filename, linenum, errtype, errnum, context, description = m.groups()

        if errtype == "E":
            msg = "Error"
        else:
            msg = "Warning"

        # Here we are targetting the following flymake regexp:
        #
        #  ("\\(.*\\) at \\([^ \n]+\\) line \\([0-9]+\\)[,.\n]" 2 3 nil 1)
        #
        # where the number at the end indicate the index into the regexp
        # groups of ( file, line, column, error text )
        #
        # You can see what regexps flymake uses to parse its output by   
        # running 'M-x describe-variable' on the variable
        # 'flymake-err-line-patterns'

        print "%s %s%s %s at %s line %s." % ( msg, errtype, errnum,
                                              description, filename, linenum )


